from jose import jwt
import time
import dotenv
from core.config import settings

dotenv.load_dotenv(".env")

secret_key = "INTERNAL_AUTH_SECRET_KEY"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à settings.jwt_secret_key
algorithm = "HS256"
user_id = "02a15566-6bcf-4a0d-9570-d04317da1e6b"
payload = {
    "user_id": user_id,
    "roles": [],
    "jti": "e7862a08-79e9-4f43-abb1-6840b8c4657d",
    "exp": int(time.time()) + 36000  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 1 —á–∞—Å
}
token = jwt.encode(payload, secret_key, algorithm=algorithm)
print(token)

from service.bearer import decode_token
result = decode_token(token)
print(result)

import asyncio
import json
import websockets
from aio_pika import connect_robust, Message

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WS_URI = "ws://localhost:80/ws"
RABBITMQ_URI = "amqp://guest:123123@localhost:5672/"
QUEUE_NAME =  "notification_websocket"
TEST_USER_ID = user_id
TEST_TOKEN = token  # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π JWT


async def websocket_client():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ WebSocket –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        headers = {"Authorization": f"Bearer {TEST_TOKEN}"}
        async with websockets.connect(WS_URI, additional_headers=headers) as ws:
            print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")

            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - keep-alive
            greeting = await ws.recv()
            print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ: {greeting}")

            # –ñ–¥–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–∞–π–º–∞—É—Ç 15 —Å–µ–∫)
            try:
                notification = await asyncio.wait_for(ws.recv(), timeout=15)
                print(f"üéâ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification}")
            except asyncio.TimeoutError:
                print("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏—à–ª–æ (—Ç–∞–π–º–∞—É—Ç)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {str(e)}")
        raise


async def send_rabbitmq_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ RabbitMQ."""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for attempt in range(3):
            try:
                connection = await asyncio.wait_for(
                    connect_robust(RABBITMQ_URI),
                    timeout=5
                )
                break
            except Exception as e:
                if attempt == 2:
                    raise
                print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {str(e)}")
                await asyncio.sleep(2)

        async with connection:
            channel = await connection.channel()
            await channel.declare_queue(QUEUE_NAME, durable=True)

            message = {
                "notification_id": "test_notification_123",
                "to_id": TEST_USER_ID
            }

            await channel.default_exchange.publish(
                Message(body=json.dumps(message).encode()),
                routing_key=QUEUE_NAME
            )
            print("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ RabbitMQ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ RabbitMQ: {str(e)}")
        raise


async def main():
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è user_id: {TEST_USER_ID}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç WebSocket
    ws_task = asyncio.create_task(websocket_client())

    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await asyncio.sleep(2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await send_rabbitmq_message()

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    await ws_task


if __name__ == "__main__":
    asyncio.run(main())


if __name__ == "__main__":
    asyncio.run(main())